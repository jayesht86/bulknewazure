locals {
  tags = merge(var.tags, {
    creation_mode                             = "terraform"
    terraform-azurerm-msci-compute-linux_vm = "True"
  })

  zone_sequence_init = {
    for zone in distinct(var.vm_config.zone_list) : zone => 0
  }

  vm_list = flatten([
    for config in [var.vm_config] : [
      for idx, zone in config.zone_list : {
        name               = format("%s%s%s%s-%03d", var.region_code, var.product_code, var.environment_code, zone, local.zone_sequence_init[zone] + var.sequence_start + 1)
        zone_sequence_init = merge(local.zone_sequence_init, { for k, v in local.zone_sequence_init : k => k == zone ? v + 1 : v })
        size               = config.size
        os_disk_size_gb    = config.os_disk_size_gb
        zone               = zone
      }
    ]
  ])

  effective_disk_count = var.managed_disk != null ? length(var.managed_disk.managed_disks_list) : 0

  vm_managed_disk_list = flatten([
    for obj in local.vm_list : [
      for count_idx in range(local.effective_disk_count) : {
        managed_disk_name                             = format("ddsk-%s-%03d", obj.name, count_idx + 1)
        managed_disk_storage_type                     = var.managed_disk.managed_disk_storage_type
        managed_disk_create_option                      = var.managed_disk.managed_disk_create_option
        managed_disk_marketplace_reference_id           = var.managed_disk.managed_disk_marketplace_reference_id
      }
    ]
  ])

  vm_names = [for vm in local.vm_list : vm.name]

  disk_attachments = var.managed_disk != null ? flatten([
    for vm_idx, vm in local.vm_list : [
      for disk_idx, disk_size in var.managed_disk.managed_disks_list : {
        vm              = vm.name
        disk            = format("ddsk-%s-%03d", vm.name, disk_idx + 1)
        lun             = disk_idx
        cache           = coalesce(var.managed_disk.managed_disk_attachment_cache, "None")
        create_option   = coalesce(var.managed_disk.managed_disk_attachment_create_option, "Attach")
        write_accelerator = coalesce(var.managed_disk.managed_disk_attachment_write_accelerator_enabled, false)
      }
    ]
  ]) : []

  disk_attachments2 = var.managed_disk != null ? { for o in local.disk_attachments : "${o.vm}-${o.disk}-${o.lun}" => o } : {}

  vm_lists = azurerm_linux_virtual_machine.vm

  asg_list = {
    for asg in data.azurerm_application_security_group.existing_asgs :
    asg.name => asg.id
  }

  nic_names = flatten([
    for vm in local.vm_list : concat(
      [vm.linux_vm_default_nic.nic_name],
      [for nic in vm.linux_vm_additional_nic : nic.nic_name]
    )
  ])

  nic_list = { for nic in data.azurerm_network_interface.existing_nics : nic.name => nic.id }

  asg_mapped = {
    for asg in var.asg_config : asg.asg_name => {
      asg_name                = asg.asg_name
      asg_custom_tags         = lookup(asg, "asg_custom_tags", {})
      asg_association_nic_names = lookup(asg, "asg_association_nic_names", [])
    }
  }

  asg_attachment_list = flatten([
    for asg in var.asg_config : [
      for nic in asg.asg_association_nic_names : {
        nic_name = lower(trimspace(nic))
        asg_name = asg.asg_name
      }
    ] if length(asg.asg_association_nic_names) > 0
  ])

  asg_attachment_map = {
    for item in local.asg_attachment_list : "${item.nic_name}-${item.asg_name}" => item if contains(keys(local.nic_list), item.nic_name)
  }
}

output "disk_list" {
  value = local.vm_managed_disk_list
}

output "vm_list_debug" {
  value = local.vm_list
}

output "vm_managed_disk_debug" {
  value = local.vm_managed_disk_list
}

output "managed_disks_list_debug" {
  value = var.managed_disk.managed_disks_list
}

output "disk_attachments_debug" {
  value = local.disk_attachments
}

name               = format("%s%s%s%s-%03d", var.region_code, var.product_code, var.environment_code, zone, local.zone_sequence_init[zone] + var.sequence_start -1 + idx) # Change: name calculation modified

output "disk_attachments_before_filter" {
  value = local.disk_attachments
}
